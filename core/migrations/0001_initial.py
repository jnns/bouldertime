# Generated by Django 3.0.5 on 2020-05-18 11:56

import core.models.booking
import core.models.gym
import core.models.user
import datetime
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0011_update_proxy_permissions"),
    ]

    operations = [
        migrations.CreateModel(
            name="Booking",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "pin",
                    models.PositiveSmallIntegerField(default=core.models.booking.pin),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("NEW", "NEW"),
                            ("EXPIRED", "EXPIRED"),
                            ("CONFIRMED", "CONFIRMED"),
                            ("CANCELLED", "CANCELLED"),
                            ("NOSHOW", "NOSHOW"),
                        ],
                        default="NEW",
                        max_length=255,
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("date", models.DateField(default=datetime.date.today)),
                ("start", models.TimeField()),
                ("end", models.TimeField()),
                ("checkin_at", models.TimeField(blank=True, null=True)),
                ("checkout_at", models.TimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Gym",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Name")),
                (
                    "slug",
                    models.SlugField(
                        allow_unicode=True,
                        help_text="A short name that is used in URLs.",
                        verbose_name="Shortname",
                    ),
                ),
                (
                    "address",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Address"
                    ),
                ),
                (
                    "opens_at",
                    models.TimeField(
                        default=core.models.gym.at_10am, verbose_name="Opens at"
                    ),
                ),
                (
                    "closes_at",
                    models.TimeField(
                        default=core.models.gym.at_10pm, verbose_name="Closes at"
                    ),
                ),
                (
                    "max_guests",
                    models.PositiveSmallIntegerField(
                        default=100,
                        help_text="Maximum number of people that are allowed to occupy the space simultaneously. Also the maximum number of bookings for a time slot.",
                    ),
                ),
                (
                    "num_days_available",
                    models.PositiveSmallIntegerField(
                        default=3,
                        help_text="How many days can be booked in advance? How many days are shown on the booking overview?",
                        verbose_name="Bookable days",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PhoneNumber",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "hashed_number",
                    models.CharField(default=None, max_length=255, unique=True),
                ),
                ("verified_at", models.DateTimeField(null=True)),
                (
                    "blocked_due_to",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.Booking",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="booking",
            name="gym",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="core.Gym"
            ),
        ),
        migrations.AddField(
            model_name="booking",
            name="phone_number",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="core.PhoneNumber"
            ),
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        error_messages={
                            "unique": "A user with that email address already exists."
                        },
                        max_length=254,
                        unique=True,
                        verbose_name="email address",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={"verbose_name": "user", "verbose_name_plural": "users",},
            managers=[("objects", core.models.user.UserManager()),],
        ),
        migrations.AddConstraint(
            model_name="booking",
            constraint=models.UniqueConstraint(
                condition=models.Q(status__in=["NEW", "CONFIRMED"]),
                fields=("name",),
                name="unique_name",
            ),
        ),
    ]
